{
	"info": {
		"_postman_id": "28ad8a74-4cf6-420f-9d1a-b6c33d7fc54b",
		"name": "Practica 3 - Hotel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24345932"
	},
	"item": [
		{
			"name": "HealthCheck - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pruba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 201\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status code response es un 201\", function(){\r",
							"        pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a Created\", function(){\r",
							"        pm.response.to.have.status(\"Created\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ping",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetToken - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pruba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status code response es un 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK\", function(){\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body contiene la palabra TOKEN\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"token\")\r",
							"});\r",
							"\r",
							"console.log(pm.response.text())\r",
							"console.log(pm.response.json().token.length)\r",
							"\r",
							"pm.test(\"Validar que el campo token regresa un dato tipo STRING\", function(){\r",
							"    pm.expect(pm.response.json().token).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"/*pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", function(){\r",
							"    pm.expect(pm.response.json().token).to.have.lengthOf(15)\r",
							"});\r",
							"*/\r",
							"pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", function(){\r",
							"    pm.expect(pm.response.json().token.length).to.be.equal(15)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el campo de token no es NULL\", function(){\r",
							"    pm.expect(pm.response.json().token).to.be.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});\r",
							"\r",
							"//Crear variables\r",
							"var token = pm.response.json().token;\r",
							"pm.environment.set(\"token\",token)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/auth",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking - 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"nombre\", name)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"apellido\", lastname)\r",
							"\r",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"precio\", price)\r",
							"\r",
							"var deposit = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"deposito\",deposit)\r",
							"\r",
							"var date = pm.variables.replaceIn(\"{{$isoTimestamp}}\")\r",
							"//console.log(date)\r",
							"var checkin = date.split('T')[0];\r",
							"//console.log(checkin)\r",
							"pm.environment.set(\"checkin\",checkin)\r",
							"\r",
							"//var currentdate = new Date().getDate()\r",
							"//console.log(currentdate + 1)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"//console.log(\"Response: \", responseJson.bookingid)\r",
							"pm.environment.set(\"id\", responseJson.bookingid)\r",
							"\r",
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"//console.log(\"Variable nombre: \", name)\r",
							"//console.log(\"Response: \", responseJson.booking.firstname)\r",
							"pm.test(\"Validar que el nombre del body sea el mismo que el del response\", function(){\r",
							"    pm.expect(responseJson.booking.firstname).to.eql(name)\r",
							"});\r",
							"\r",
							"//Validar un header response\r",
							"pm.test(\"Validar que el header Content-type contiene application Json\", function(){\r",
							"    pm.expect(pm.response.headers.get('Content-type')).to.eql('application/json; charset=utf-8')\r",
							"});\r",
							"\r",
							"pm.test(\"Validar el tamaño de la respuesta\", function(){\r",
							"    pm.expect(pm.response.size().total).to.be.below(500)\r",
							"});\r",
							"\r",
							"//console.log(pm.response.headers.get('Content-type'))\r",
							"//console.log(pm.response.size())"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{nombre}}\",\r\n    \"lastname\" : \"{{apellido}}\",\r\n    \"totalprice\" : \"{{precio}}\",\r\n    \"depositpaid\" : \"{{deposito}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterUpdate - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 201\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterDelete - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 404\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetToken - Negative test - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pruba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status code response es un 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK\", function(){\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body contiene la palabra TOKEN\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"Bad credentials\")\r",
							"});\r",
							"\r",
							"//console.log(pm.response.text())\r",
							"//console.log(pm.response.json().token.length)\r",
							"\r",
							"pm.test(\"Validar que el campo token regresa un dato tipo STRING\", function(){\r",
							"    pm.expect(pm.response.json().reason).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"/*pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", function(){\r",
							"    pm.expect(pm.response.json().token).to.have.lengthOf(15)\r",
							"});\r",
							"*/\r",
							"pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", function(){\r",
							"    pm.expect(pm.response.json().reason.length).to.be.equal(15)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el campo de token no es NULL\", function(){\r",
							"    pm.expect(pm.response.json().reason).to.be.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});\r",
							"\r",
							"//Crear variables\r",
							"var token = pm.response.json().token;\r",
							"pm.environment.set(\"token\",token)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin1\",\r\n    \"password\" : \"password123\"\r\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/auth",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - Negative test - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 404\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/6545643201319654",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"6545643201319654"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - Negative test  expired token - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 403\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(403)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - Negative test Invalid ID - 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 403\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(403)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking/asdf444",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"asdf444"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - Negative Test  Invalid Id- 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 403\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(403)\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 segundo\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no este vacio\", function(){\r",
							"    //pm.expect(pm.response.body).not.empty;\r",
							"     pm.expect(pm.response.body).not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/james",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"james"
					]
				}
			},
			"response": []
		}
	]
}